// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/teal/aggregator/operator_requester (interfaces: OperatorRequester)
//
// Generated by this command:
//
//	mockgen -destination=./operator_requester/mocks/operator_requester.go -package=mocks github.com/Layr-Labs/teal/aggregator/operator_requester OperatorRequester
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/Layr-Labs/eigensdk-go/types"
	v1 "github.com/Layr-Labs/teal/api/service/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockOperatorRequester is a mock of OperatorRequester interface.
type MockOperatorRequester struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorRequesterMockRecorder
	isgomock struct{}
}

// MockOperatorRequesterMockRecorder is the mock recorder for MockOperatorRequester.
type MockOperatorRequesterMockRecorder struct {
	mock *MockOperatorRequester
}

// NewMockOperatorRequester creates a new mock instance.
func NewMockOperatorRequester(ctrl *gomock.Controller) *MockOperatorRequester {
	mock := &MockOperatorRequester{ctrl: ctrl}
	mock.recorder = &MockOperatorRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorRequester) EXPECT() *MockOperatorRequesterMockRecorder {
	return m.recorder
}

// RequestCertification mocks base method.
func (m *MockOperatorRequester) RequestCertification(ctx context.Context, operator types.OperatorAvsState, taskIndex uint32, requestData []byte) (*v1.CertifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestCertification", ctx, operator, taskIndex, requestData)
	ret0, _ := ret[0].(*v1.CertifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestCertification indicates an expected call of RequestCertification.
func (mr *MockOperatorRequesterMockRecorder) RequestCertification(ctx, operator, taskIndex, requestData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCertification", reflect.TypeOf((*MockOperatorRequester)(nil).RequestCertification), ctx, operator, taskIndex, requestData)
}
